FROM nginx:stable-alpine

RUN rm /etc/nginx/nginx.conf

# Set environment variable (example)
ENV APP_NAME "My Production Website"

# Create a custom Nginx configuration file
RUN echo "
server {
    listen 80;
    server_name  $host; # Use the hostname
    root /usr/share/nginx/html;
    index index.html;

    # Security Headers
    add_header X-Frame-Options \"SAMEORIGIN\";
    add_header X-Content-Type-Options \"nosniff\";
    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;
    add_header Referrer-Policy \"strict-origin-when-cross-origin\";

    # Gzip compression
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        application/xml
        application/xml+rss
        application/xhtml+xml
        application/x-javascript
        text/xml;

    # Cache static assets (1 hour)
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|woff|woff2)$ {
        expires 1h;
        add_header Cache-Control \"public\";
    }

    location / {
        try_files \$uri \$uri/ /index.html;
    }
}
" > /etc/nginx/nginx.conf

# Copy the static website files to the Nginx web server's default directory
COPY . /usr/share/nginx/html

EXPOSE 80

# Health Check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s \
    CMD curl -f http://localhost/ || exit 1

# Command to start the Nginx server
CMD ["nginx", "-g", "daemon off;"]


This contain 
Improvements for a more production-ready Dockerfile:

Optimize Nginx Configuration:

Add caching for static assets.

Implement Gzip compression.

Include security headers.

Health Check: Add a HEALTHCHECK instruction to allow Docker or an orchestrator to monitor the health of your container.

Environment Variables: If your application requires any configuration, use ENV instructions and externalize the configuration.

Logging: Consider how logs will be handled in a production environment.

In summary, your Dockerfile is a good starting point for production, but with a few enhancements, it could be even more robust.




-----------------------------------------------------------
FROM nginx:stable-alpine

RUN rm /etc/nginx/conf.d/default.conf
# Create a custom Nginx configuration file
RUN echo "server { \
    listen 80; \
    root /usr/share/nginx/html; \
    index index.html; \
    location / { \
        try_files \$uri \$uri/ /index.html; \
    } \
}" > /etc/nginx/conf.d/default.conf

# Copy the static website files to the Nginx web server's default directory
COPY . /usr/share/nginx/html

EXPOSE 80

# Command to start the Nginx server
CMD ["nginx", "-g", "daemon off;"]